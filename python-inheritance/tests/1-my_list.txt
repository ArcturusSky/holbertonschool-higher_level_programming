>>> MyList = __import__('1-my_list').MyList

# Create an instance of MyList and add elements to be sorted in ascending order
# This will be done each time for each test to reset an empty list
>>> my_list = MyList()

# Correct situations


# ##... with only positive integers

>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(2)

# ### Print the list in ascending order
>>> my_list.print_sorted()
[1, 2, 3]


# ##... with positive and negative integers
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(-2)

# ### Print the list in ascending order
>>> my_list.print_sorted()
[-2, 1, 3]


# ##... with floats integers
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(0.5)

# ### Print the list in ascending order
>>> my_list.print_sorted()
[0.5, 1, 3]


# ##... with only one integer
>>> my_list = MyList()
>>> my_list.append(3)

# ### Print the list in ascending order
>>> my_list.print_sorted()
[3]


# ##... with an empty list
>>> my_list = MyList()

# ### Print an empty list
>>> my_list.print_sorted()
[]


# ##... with a "None" list
>>> my_list = MyList()
>>> my_list.append(None)

# ### Print a list with "None"
>>> my_list.print_sorted()
[None]


# ##... with a single "NaN" element in the list
>>> my_list = MyList()
>>> my_list.append(float('nan'))

# ### Print a list with only "NaN"
>>> my_list.print_sorted()
[nan]


# ##... with integer AND a "NaN" element in the list
>>> my_list = MyList()
>>> my_list.append(float('nan'))
>>> my_list.append(3)

# ### Print a sorted list with Nan and an integer
>>> my_list.print_sorted()
[nan, 3]


# ##... with a single "Infinite" element in the list
>>> my_list = MyList()
>>> my_list.append(float('inf'))

# ### Print a list with an "infinite" element
>>> my_list.print_sorted()
[inf]


# ##... with a single negative "Infinite" element in the list
>>> my_list = MyList()
>>> my_list.append(float('-inf'))

# ### Print a list with a negative "infinite" element
>>> my_list.print_sorted()
[-inf]


# ##... with integer AND a "infinite" element in the list
>>> my_list = MyList()
>>> my_list.append(float('inf'))
>>> my_list.append(3)

# ### Print a sorted list with integer AND a "infinite" element in the list
>>> my_list.print_sorted()
[3, inf]


# ##... with both negative "infinite" AND "infinite" and integer element in the list
>>> my_list = MyList()
>>> my_list.append(float('inf'))
>>> my_list.append(3)
>>> my_list.append(float('-inf'))

# ### Print a sorted list with integer AND a "infinite" element in the list
>>> my_list.print_sorted()
[-inf, 3, inf]


# ##... with a string instead of integer
>>> my_list = MyList()
>>> my_list.append("blabla")

# ### Print a sorted list with a string inside
>>> my_list.print_sorted()
['blabla']


# ##... with a multiple strings instead of integers
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append("choix")

# ### Print a sorted list with strings inside
>>> my_list.print_sorted()
['blabla', 'choix']


# ##... with lists only
>>> my_list = MyList()
>>> my_list.append([2])
>>> my_list.append([1])
>>> my_list.append([3])

# ### Print sorted list
>>> my_list.print_sorted()
[[1], [2], [3]]


# ##... with tuples only
>>> my_list = MyList()
>>> my_list.append((3, 2))
>>> my_list.append((1,))
>>> my_list.append((2, 1))

# ### Print sorted list of tuples
>>> my_list.print_sorted()
[(1,), (2, 1), (3, 2)]


# ##... with sets only
>>> my_list = MyList()
>>> my_list.append({3, 2})
>>> my_list.append({1})
>>> my_list.append({2, 1})

# ### Print just the list of sets since sets are unsorted
>>> my_list.print_sorted()
[{2, 3}, {1}, {1, 2}]


# Uncorrect situations


# ##... with mixed integer and string
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append(2)

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'int' and 'str'


# ##... with mixed integer and list
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append([1, 2])

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'list' and 'int'


# ##... with mixed integer and tuple
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append((1, 2))

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'tuple' and 'int'


# ##... with mixed integer and set
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append({1, 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'set' and 'int'


# ##... with mixed integer and dictionnaries
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'int'


# ##... with mixed string and list
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append([1, 2])

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'list' and 'str'


# ##... with mixed string and tuple
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append((1, 2))

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'tuple' and 'str'


# ##... with mixed string and set
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append({1, 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'set' and 'str'


# ##... with mixed string and dictionary
>>> my_list = MyList()
>>> my_list.append("blabla")
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'str'


# ##... with mixed list and tuple
>>> my_list = MyList()
>>> my_list.append([1, 2])
>>> my_list.append((1, 2))

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'tuple' and 'list'


# ##... with mixed list and set
>>> my_list = MyList()
>>> my_list.append([1, 2])
>>> my_list.append({1, 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'set' and 'list'


# ##... with mixed list and dictionary
>>> my_list = MyList()
>>> my_list.append([1, 2])
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'list'


# ##... with mixed tuple and set
>>> my_list = MyList()
>>> my_list.append((1, 2))
>>> my_list.append({1, 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'set' and 'tuple'


# ##... with mixed tuple and dictionary
>>> my_list = MyList()
>>> my_list.append((1, 2))
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'tuple'


# ##... with mixed set and dictionary
>>> my_list = MyList()
>>> my_list.append({1, 2})
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'set'

# ##... with mixed dictionary and dictionary
>>> my_list = MyList()
>>> my_list.append({"clef": 3})
>>> my_list.append({"key": 2})

# ### Raise a TypeError
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'dict' and 'dict'